document.querySelector('mutation-test-report-app').report = {"files":{"../employee-project/controller/employee.controller.js":{"language":"javascript","mutants":[{"id":"1","location":{"end":{"column":26,"line":3},"start":{"column":21,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"0","location":{"end":{"column":56,"line":1},"start":{"column":31,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":32,"line":4},"start":{"column":24,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3","location":{"end":{"column":35,"line":5},"start":{"column":21,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"4","location":{"end":{"column":2,"line":14},"start":{"column":27,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"5","location":{"end":{"column":2,"line":40},"start":{"column":52,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":4,"line":36},"start":{"column":7,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"7","location":{"end":{"column":23,"line":21},"start":{"column":9,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"8","location":{"end":{"column":23,"line":21},"start":{"column":9,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"9","location":{"end":{"column":79,"line":22},"start":{"column":54,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"10","location":{"end":{"column":21,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"11","location":{"end":{"column":21,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"12","location":{"end":{"column":6,"line":28},"start":{"column":23,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"13","location":{"end":{"column":65,"line":27},"start":{"column":15,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"14","location":{"end":{"column":4,"line":39},"start":{"column":17,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"15","location":{"end":{"column":2,"line":53},"start":{"column":53,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"16","location":{"end":{"column":4,"line":50},"start":{"column":7,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"17","location":{"end":{"column":48,"line":45},"start":{"column":9,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"18","location":{"end":{"column":48,"line":45},"start":{"column":9,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"19","location":{"end":{"column":48,"line":45},"start":{"column":9,"line":45}},"mutatorName":"LogicalOperator","replacement":"allEmployees || allEmployees.length > 0","status":"Killed"},{"id":"20","location":{"end":{"column":48,"line":45},"start":{"column":25,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"21","location":{"end":{"column":48,"line":45},"start":{"column":25,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"22","location":{"end":{"column":48,"line":45},"start":{"column":25,"line":45}},"mutatorName":"EqualityOperator","replacement":"allEmployees.length >= 0","status":"Survived"},{"id":"23","location":{"end":{"column":48,"line":45},"start":{"column":25,"line":45}},"mutatorName":"EqualityOperator","replacement":"allEmployees.length <= 0","status":"Killed"},{"id":"24","location":{"end":{"column":6,"line":47},"start":{"column":50,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"25","location":{"end":{"column":6,"line":49},"start":{"column":12,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"26","location":{"end":{"column":4,"line":52},"start":{"column":17,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"27","location":{"end":{"column":2,"line":67},"start":{"column":53,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"28","location":{"end":{"column":4,"line":63},"start":{"column":7,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"29","location":{"end":{"column":17,"line":58},"start":{"column":9,"line":58}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"30","location":{"end":{"column":17,"line":58},"start":{"column":9,"line":58}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"31","location":{"end":{"column":6,"line":60},"start":{"column":19,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"32","location":{"end":{"column":6,"line":62},"start":{"column":12,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"33","location":{"end":{"column":4,"line":66},"start":{"column":17,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"34","location":{"end":{"column":2,"line":103},"start":{"column":56,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"35","location":{"end":{"column":4,"line":99},"start":{"column":7,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"36","location":{"end":{"column":8,"line":92},"start":{"column":7,"line":90}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"37","location":{"end":{"column":32,"line":91},"start":{"column":27,"line":91}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"38","location":{"end":{"column":24,"line":94},"start":{"column":9,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"39","location":{"end":{"column":24,"line":94},"start":{"column":9,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"40","location":{"end":{"column":6,"line":96},"start":{"column":26,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"41","location":{"end":{"column":6,"line":98},"start":{"column":12,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"42","location":{"end":{"column":4,"line":102},"start":{"column":17,"line":99}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"43","location":{"end":{"column":2,"line":120},"start":{"column":56,"line":105}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"44","location":{"end":{"column":4,"line":116},"start":{"column":7,"line":106}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"45","location":{"end":{"column":16,"line":110},"start":{"column":9,"line":110}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"46","location":{"end":{"column":16,"line":110},"start":{"column":9,"line":110}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"47","location":{"end":{"column":6,"line":112},"start":{"column":18,"line":110}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"48","location":{"end":{"column":6,"line":115},"start":{"column":12,"line":112}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"49","location":{"end":{"column":44,"line":114},"start":{"column":28,"line":114}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"50","location":{"end":{"column":4,"line":119},"start":{"column":17,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"51","location":{"end":{"column":2,"line":173},"start":{"column":51,"line":138}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"52","location":{"end":{"column":4,"line":169},"start":{"column":7,"line":139}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"53","location":{"end":{"column":23,"line":142},"start":{"column":9,"line":142}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"54","location":{"end":{"column":23,"line":142},"start":{"column":9,"line":142}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"55","location":{"end":{"column":75,"line":143},"start":{"column":50,"line":143}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"56","location":{"end":{"column":18,"line":145},"start":{"column":9,"line":145}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"57","location":{"end":{"column":18,"line":145},"start":{"column":9,"line":145}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"58","location":{"end":{"column":18,"line":145},"start":{"column":9,"line":145}},"mutatorName":"BooleanLiteral","replacement":"employee","status":"Killed"},{"id":"59","location":{"end":{"column":6,"line":149},"start":{"column":20,"line":145}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"60","location":{"end":{"column":64,"line":148},"start":{"column":15,"line":148}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"62","location":{"end":{"column":26,"line":155},"start":{"column":9,"line":155}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"61","location":{"end":{"column":26,"line":155},"start":{"column":9,"line":155}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"63","location":{"end":{"column":26,"line":155},"start":{"column":9,"line":155}},"mutatorName":"BooleanLiteral","replacement":"validatePassword","status":"Killed"},{"id":"64","location":{"end":{"column":68,"line":158},"start":{"column":15,"line":158}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"66","location":{"end":{"column":26,"line":164},"start":{"column":7,"line":164}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"65","location":{"end":{"column":8,"line":162},"start":{"column":7,"line":160}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"67","location":{"end":{"column":24,"line":164},"start":{"column":20,"line":164}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"68","location":{"end":{"column":28,"line":167},"start":{"column":16,"line":167}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"69","location":{"end":{"column":4,"line":172},"start":{"column":17,"line":169}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"const employeeModel = require(\"../model/employee.model\");\n// const joi = require(\"@hapi/joi\");\nconst joi = require(\"joi\");\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nconst saltRounds = 10;\n\nconst schema = joi.object({\n  name: joi.string().required(),\n  email: joi.string().required().email(),\n  password: joi.string().min(6).max(12).required(),\n  gender: joi.string(),\n  phone: joi.string(),\n});\n\nexports.createEmployee = async (req, res, next) => {\n  try {\n    // console.log(\"create employee called\");\n    const joiCheck = await schema.validate(req.body);\n    // console.log(\"validation result\", joiCheck);\n    if (joiCheck.error) return res.status(400).json(joiCheck.error);\n    const doEmailExist = await employeeModel.findOne({ email: req.body.email });\n    // console.log(\"doEmailExist :\", doEmailExist)\n    if (doEmailExist) {\n      return res\n        .status(400)\n        .json(\"Email you provided already exist in our database\");\n    }\n    const salt = await bcrypt.genSalt(saltRounds);\n    const encryptedPassword = await bcrypt.hash(req.body.password, salt);\n    console.log(encryptedPassword);\n    req.body.password = encryptedPassword;\n    const newEmployee = await employeeModel.create(req.body);\n    console.log(newEmployee);\n    res.status(201).json(newEmployee);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json(err);\n  }\n};\n\nexports.getAllEmployees = async (req, res, next) => {\n  try {\n    const allEmployees = await employeeModel.find({});\n    if (allEmployees && allEmployees.length > 0) {\n      res.status(200).json(allEmployees);\n    } else {\n      res.status(404).json();\n    }\n  } catch (err) {\n    res.status(500).json(err);\n  }\n};\n\nexports.getEmployeeById = async (req, res, next) => {\n  try {\n    const employee = await employeeModel.findById(req.params.employee_id);\n    if (employee) {\n      res.status(200).json(employee);\n    } else {\n      res.status(404).send();\n    }\n  } catch (err) {\n    console.log(err);\n    res.status(500).send(err);\n  }\n};\n\n//using callback\n// exports.getEmployeeById = function (req, res, next) {\n//     try {\n\n//         employeeModel.findById(req.params.employee_id, function (err, employee) {\n//             console.log('inside callback')\n//             if (err)\n//                 return res.send(err);\n//             res.status(200).json(employee);\n//         });\n//     }\n//     catch {\n//         res.status(500).send(err);\n//     }\n// };\n\nexports.updateEmployeeById = async (req, res, next) => {\n  try {\n    const updatedEmployee = await employeeModel.findByIdAndUpdate(\n      req.params.employee_id,\n      req.body,\n      {\n        useFindAndModify: false,\n      }\n    );\n    if (updatedEmployee) {\n      res.status(201).json(updatedEmployee);\n    } else {\n      res.status(400).send();\n    }\n  } catch (err) {\n    console.log(err);\n    res.status(500).json(err);\n  }\n};\n\nexports.deleteEmployeeById = async (req, res, next) => {\n  try {\n    const deleted = await employeeModel.findByIdAndDelete(\n      req.params.employee_id\n    );\n    if (deleted) {\n      res.status(200).json(deleted);\n    } else {\n      //   console.log(\"User Not Found\");\n      res.status(404).json(\"User Not Found\");\n    }\n  } catch (err) {\n    console.log(err);\n    res.status(500).json(err);\n  }\n};\n\n// exports.deleteEmployeeById = async (req, res , next) =>{\n//     employeeModel.findByIdAndDelete(req.params.employee_id)\n//     .then(result => {\n//         if (result) {\n//             res.status(200).json(result);\n//         }\n//         else{\n//             console.log('User Not Found');\n//             res.status(404).json('User Not Found');\n//         }\n//     })\n//     .catch(err=>{\n//         res.status(500).send(err);\n//     })\n// }\n\nexports.loginEmployee = async (req, res, next) => {\n  try {\n    const joiCheck = await schema.validate(req.body);\n    // console.log(\"validation result\", joiCheck.error);\n    if (joiCheck.error) return res.status(400).json(joiCheck.error);\n    const employee = await employeeModel.findOne({ email: req.body.email });\n    console.log(employee);\n    if (!employee) {\n      return res\n        .status(400)\n        .json(\"Email you provided doesnt exist in our database\");\n    }\n    const validatePassword = await bcrypt.compare(\n      req.body.password,\n      employee.password\n    );\n    // console.log(\"Password Validation: \", validatePassword);\n    if (!validatePassword)\n      return res\n        .status(400)\n        .send(\"you provided an invalid password , please try again\");\n    const jwtToken = await jwt.sign(\n      {\n        data: employee,\n      },\n      process.env.JWT_TOKEN_KEY,\n      { expiresIn: \"1h\" }\n    );\n    console.log(jwtToken);\n    res.header(\"auth-token\", jwtToken);\n    res.status(201).json(employee);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json(err);\n  }\n};\n"}},"schemaVersion":"1.0","thresholds":{"high":95,"low":85,"break":56}};